package com.smartsparrow.eval.data;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.smartsparrow.courseware.data.CoursewareElementType;
import com.smartsparrow.eval.action.Action;
import com.smartsparrow.eval.action.ActionResult;

/**
 * This class holds all the relevant information generated as a result of a walkable evaluation request.
 * This is instantiated after the scenarios evaluation takes place. The object is then passed around so it can be: <br/>
 * - enriched with the deserialized triggered {@link Action} <br/>
 * - kick off the action consumers so the {@link ActionResult} can be populated <br/>
 * When the object is ready it is finally used to construct an {@link com.smartsparrow.learner.data.Evaluation} object
 * that can be stored into the DB.
 */
public class WalkableEvaluationResult {

    private UUID id;
    private UUID walkableId;
    private CoursewareElementType walkableType;
    private ScenarioEvaluationResult truthful;
    // it is up to the enricher to determine the value of this field
    @JsonInclude
    private boolean walkableComplete;
    // represents the results generated by the action consumers
    private List<ActionResult> actionResults;
    // the actions that are triggered as part of this evaluation
    private List<Action> triggeredActions = new ArrayList<>();

    public UUID getId() {
        return id;
    }

    public WalkableEvaluationResult setId(UUID id) {
        this.id = id;
        return this;
    }

    public UUID getWalkableId() {
        return walkableId;
    }

    public WalkableEvaluationResult setWalkableId(UUID walkableId) {
        this.walkableId = walkableId;
        return this;
    }

    public CoursewareElementType getWalkableType() {
        return walkableType;
    }

    public WalkableEvaluationResult setWalkableType(CoursewareElementType walkableType) {
        this.walkableType = walkableType;
        return this;
    }

    /**
     * @return a value representing if this walkable was completed or not
     */
    public boolean isWalkableComplete() {
        return walkableComplete;
    }

    public WalkableEvaluationResult setWalkableComplete(boolean walkableComplete) {
        this.walkableComplete = walkableComplete;
        return this;
    }

    /**
     * @return the truthful scenario or the first scenario that evaluated to true
     */
    public ScenarioEvaluationResult getTruthfulScenario() {
        return truthful;
    }

    public WalkableEvaluationResult setTruthfulScenario(ScenarioEvaluationResult truthful) {
        this.truthful = truthful;
        return this;
    }

    /**
     * @return a list describing the results from the action consumers
     */
    public List<ActionResult> getActionResults() {
        return actionResults;
    }

    public WalkableEvaluationResult setActionResults(List<ActionResult> actionResults) {
        this.actionResults = actionResults;
        return this;
    }

    /**
     * @return the list of actions to trigger action consumers for
     */
    public List<Action> getTriggeredActions() {
        return triggeredActions;
    }

    public WalkableEvaluationResult setTriggeredActions(List<Action> triggeredActions) {
        this.triggeredActions = triggeredActions;
        return this;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        WalkableEvaluationResult that = (WalkableEvaluationResult) o;
        return walkableComplete == that.walkableComplete &&
                Objects.equals(id, that.id) &&
                Objects.equals(walkableId, that.walkableId) &&
                walkableType == that.walkableType &&
                truthful == that.truthful &&
                Objects.equals(actionResults, that.actionResults) &&
                Objects.equals(triggeredActions, that.triggeredActions);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, walkableId, walkableType, walkableComplete, truthful, actionResults,
                triggeredActions);
    }

    @Override
    public String toString() {
        return "WalkableEvaluationResult{" +
                "id=" + id +
                ", walkableId=" + walkableId +
                ", walkableType=" + walkableType +
                ", walkableComplete=" + walkableComplete +
                ", truthful=" + truthful +
                ", actionResults=" + actionResults +
                ", triggeredActions=" + triggeredActions +
                '}';
    }
}
